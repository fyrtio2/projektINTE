Project Metrics 
(ta bort all kommentarer & sout från Game.java för att få fram de korrekta värdena)
	COM_RAT	(Comment to product code ratio)
		- 3,69%
		Ungefär 3.7% av vår kod är kommentarer
		
		Detta mått är ganska låg vilket kan indikera på bristfällig dokumentation i koden.
		Ju mer dokumentation man har ju mer blir din kod lättläst för andra aktörer som kan förstå vad koden exakt gör även för dem som inte kan programmera. 
		
		Detta mått blir då väldigt viktigt då utvecklarna kan spåra hur mycket av programmet man dokumenterar och om siffran blir för låg och man märker av det i de tidigaste stadierna av utvecklingsprocessen så
		kan man lätt se till att utvecklarna lägger mer tid på att dokumentera sin kod.  


	TEST_RAT (Test code to product code ratio)
		- 56,62%
		Ungefär 56.7% av koden är test kod. 
		Det här måttet är anser vi vara extremt viktigt för att se om man har skrivit tillräckligt med testfall i produkten och ger en indikation till om den är vältestad. 
		Detta mått kompletteras bäst med coverage.

	LOC (Lines of Code)
		- 1678
		
	L(J) (Lines of Java)
		- 1596

	LOCp (Lines of product code)
		- 646

	LOCt (Lines of test code)
		- 950
		I vårat projekt så är förhållandet mellan LOCp & LOCt 1:1.4705....
		Vi har alltså ungefär 47.1% mer test kod än produkt kod.
		Detta är intressant mått då det visar en av anledningarna till varför testning är så resurs krävande.
		Code coverage visar bara hur många metoder/rader som dina test täcker men det visar inte om du har testat alla vägar som programmet kan ta,
		Dessa mått är då intressanta som en kompletering för code coverage för att ta reda på hur mycket test kod vi har jämför med produkt kod.
		Vårt nuvarande värde kan indikera att vi borde lägga till fler testfall, det vanliga förhållandet som vi sett online i olika diskussioner sitter mellan
		1:1 & 1:3
		Förhållander varier på hur dogmatisk man är och högre värden kan vara en indikation på att man kanske har för många test eller att vissa av de är redundanta och bör refaktoreras eller tas bort.
		Så klart så varierar detta från projekt till projekt.
		
	CF (Coupling Factor)
		- 29,52%
		Att veta hur mycket klasserna är beroende av varandra är viktigt för att kunna veta om det är värt att kunna göra en helt ny produkt eller om det är bättre att bygga en ny produkt från grunden.
		Detta mått borde fungera bäst när man mäter klass för klass då kan man veta vilka klasser som är sårbara och då kan man rikta mer resurser till för att fixa till när man väl börjar göra några ändringar. 
	
	CLOC (Comment lines of code)
		- 62